import matplotlib.pyplot as plt
import numpy as np
from numpy.linalg import inv
from DT_gain_calculator import dt_gains

# Poles and Time Step
lambda_val = 15
T = 0.02

# Transfer function 
b1 = -6.116
b0 = 152.51
a1 = 0.66
a0 = 0.0

# Continuous-Time State Space Model
A = np.array([[-a1, 1], [-a0, 0]])
B = np.array([[b1], [b0]])
C = np.array([[1, 0]])

# Convert to State Variables that Represent Position and Velocity
Trans = np.array([[1,0], [-a1,1]])
A = Trans @ A @ inv(Trans)
B = Trans @ B
C = C @ inv(Trans)

# DT Control Parameters
K, L, Ad, Bd, Cd = dt_gains(lambda_val, T, b1, b0, a1, a0)
K = K[0]
L = L[0]

# Trajectorty Parameters
setpoint = 2
move_time = 1

# Trajectorty Generation
def trajectory(xo, xf, T, time):
    if time < T:
        c0 = xo
        c2 = 3*(xf - xo)/pow(T,2)
        c3 = -2*(xf - xo)/pow(T,3)
        return (c0 + c2*pow(time,2) + c3*pow(time,3), 2*c2*time + 3*c3*pow(time,2))
    else:
        return (xf, 0)
    
# Simulation Setup
tend = 2
h = 0.0001
timeVec = np.arange(0, tend, h)
dt_interval = int(T/h)

# Initialize Values
x_log = np.zeros((2,len(timeVec)))
xhat_log = np.zeros((2,len(timeVec)))
xref_log = np.zeros((2,len(timeVec)))
u_log = np.zeros(len(timeVec))

x = np.zeros((2,1))
xhat = np.zeros((2,1))
u = 0

for i in range(len(timeVec)):
    # DT Controller Update
    if i % dt_interval == 0:
        t = i*h
        pos_ref, vel_ref = trajectory(0, setpoint, move_time, t)
        u = K[0]*(pos_ref-xhat[0,0]) + K[1]*(vel_ref-xhat[1,0]) 
        xhat = Ad @ xhat + Bd * u - L * (xhat[0,0] - x[0,0])

    # CT Plant Update
    x = x + h * (A@x + B*u)

    # Logging
    x_log[:,i] = x.reshape(-1)
    xhat_log[:,i] = xhat.reshape(-1)
    xref_log[:,i] = np.array([pos_ref, vel_ref])
    u_log[i] = u


# Plotting
plt.subplot(3, 1, 1)
plt.plot(timeVec, x_log[0,:], color="blue")
plt.plot(timeVec, xhat_log[0,:], color="red")
plt.plot(timeVec, xref_log[0,:], color="black")

plt.subplot(3, 1, 2)
plt.plot(timeVec, x_log[1,:], color="blue")
plt.plot(timeVec, xhat_log[1,:], color="red")
plt.plot(timeVec, xref_log[1,:], color="black")

plt.subplot(3, 1, 3)
plt.plot(timeVec, u_log, color="green")

plt.show()


